
worker_processes  1;

events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;

    keepalive_timeout  65;

    # Upstream for backend servers
    upstream backend1 {
	    server 192.168.7.157:8081;
    }

    upstream backend2 {
	    server 192.168.7.157:8082;
    }

    upstream backend3 {
	    server 192.168.7.157:8083;
    }
    # Cache to store results
    lua_shared_dict scores 10m;

    server {
        listen       80;
        server_name  localhost;

        location / {
	    set $backend "";

	    # Lua script to query python scoring service
	    access_by_lua_block {
		local http = require "resty.http"
		local cjson = require "cjson"
		local ip_address = ngx.var.remote_addr
		local httpc = http.new()


		-- Query for scoring service
		local res, err = httpc:request_uri("http://127.0.0.1:5000/score_ip", {
		    method = "GET",
		    query = { ip = ip_address },
		    ssl_verify = false -- Disable ssl for local requests
	    })

	    -- Handling errors
	    if not res then
	    	ngx.log(ngx.ERR, "Failed to query socring service: ", err)
		return ngx.exit(500)
	    end

	    if res.status ~= 200 then
	        ngx.log(ngx.ERR, "Scoring service returned non-200 status: ", res.status)
		return ngx.exit(500)
	    end

	    -- Parse response
	    local store_data
	    pcall(function()
	        score_data = cjson.decode(res.body)
	    end)

	    -- If decoding fails or no score is found
	    if not score_data or not score_data.score then
	        ngx.log(ngx.ERR, "Failed to decode JSON or no score field")
		return ngx.exit(500)
	    end

	    local ip_score = tonumber(score_data.score)

	    -- Routing requests
	    if ip_score == 1 then
	        ngx.var.backend = "backend1"
	    elseif ip_score == 2 then
	        ngx.var.backend = "backend2"
	    else
	        ngx.log(ngx.ERR, "Invalid IP score: ", ip_score)
		return ngx.exit(500)
	    end

        }
	proxy_pass http://$backend;
	proxy_set_header Host $host;
	proxy_set_header X-Real-IP $remote_addr;
	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	proxy_set_header X-Forwarded-Proto $scheme;
	try_files $uri $uri/ =404;
        }

    }

}
